
Tp_1_Pennisi_Gianfranco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010758  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001dde  00000000  00000000  00010788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000073a  00000000  00000000  00012566  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002f0  00000000  00000000  00012ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000298  00000000  00000000  00012f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000010a2  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d64  00000000  00000000  000142ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001502e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000b6c  00000000  00000000  000150ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00015c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000738 	.word	0x08000738

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000738 	.word	0x08000738

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	2301      	movs	r3, #1
 8000278:	408b      	lsls	r3, r1
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	7992      	ldrb	r2, [r2, #6]
 800028a:	4611      	mov	r1, r2
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	b292      	uxth	r2, r2
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	b292      	uxth	r2, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	887a      	ldrh	r2, [r7, #2]
 80002f4:	831a      	strh	r2, [r3, #24]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	460b      	mov	r3, r1
 800030c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	887a      	ldrh	r2, [r7, #2]
 8000312:	835a      	strh	r2, [r3, #26]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d006      	beq.n	8000340 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000332:	490a      	ldr	r1, [pc, #40]	; (800035c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4313      	orrs	r3, r2
 800033c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800033e:	e006      	b.n	800034e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000340:	4906      	ldr	r1, [pc, #24]	; (800035c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	43db      	mvns	r3, r3
 800034a:	4013      	ands	r3, r2
 800034c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800

08000360 <main>:
#include <stm32f4xx_rcc.h>



int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
	void delay(uint32_t tiempo);
	uint32_t aumentar(int Loop,uint32_t N);
	int Loop=0;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
	uint32_t N=0xf0000;
 800036a:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800036e:	60bb      	str	r3, [r7, #8]

	GPIO_InitTypeDef GPIO_Init_Pins;



	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000370:	2101      	movs	r1, #1
 8000372:	2008      	movs	r0, #8
 8000374:	f7ff ffd4 	bl	8000320 <RCC_AHB1PeriphClockCmd>

	GPIO_Init_Pins.GPIO_Pin= GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 8000378:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800037c:	603b      	str	r3, [r7, #0]

	GPIO_Init_Pins.GPIO_Mode=GPIO_Mode_OUT ;
 800037e:	2301      	movs	r3, #1
 8000380:	713b      	strb	r3, [r7, #4]

	GPIO_Init_Pins.GPIO_Speed= GPIO_Speed_100MHz;
 8000382:	2303      	movs	r3, #3
 8000384:	717b      	strb	r3, [r7, #5]

	GPIO_Init_Pins.GPIO_OType= GPIO_OType_PP ;
 8000386:	2300      	movs	r3, #0
 8000388:	71bb      	strb	r3, [r7, #6]

	GPIO_Init_Pins.GPIO_PuPd= GPIO_PuPd_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOD,&GPIO_Init_Pins);
 800038e:	463b      	mov	r3, r7
 8000390:	4619      	mov	r1, r3
 8000392:	4826      	ldr	r0, [pc, #152]	; (800042c <main+0xcc>)
 8000394:	f7ff ff18 	bl	80001c8 <GPIO_Init>


    while(1)
    {

    	GPIO_SetBits(GPIOD,GPIO_Pin_12);
 8000398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039c:	4823      	ldr	r0, [pc, #140]	; (800042c <main+0xcc>)
 800039e:	f7ff ffa1 	bl	80002e4 <GPIO_SetBits>
    	delay(N);
 80003a2:	68b8      	ldr	r0, [r7, #8]
 80003a4:	f000 f844 	bl	8000430 <delay>
    	GPIO_ResetBits(GPIOD,GPIO_Pin_12);
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	481f      	ldr	r0, [pc, #124]	; (800042c <main+0xcc>)
 80003ae:	f7ff ffa8 	bl	8000302 <GPIO_ResetBits>
    	delay(N);
 80003b2:	68b8      	ldr	r0, [r7, #8]
 80003b4:	f000 f83c 	bl	8000430 <delay>

    	GPIO_SetBits(GPIOD,GPIO_Pin_13);
 80003b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003bc:	481b      	ldr	r0, [pc, #108]	; (800042c <main+0xcc>)
 80003be:	f7ff ff91 	bl	80002e4 <GPIO_SetBits>
    	delay(N);
 80003c2:	68b8      	ldr	r0, [r7, #8]
 80003c4:	f000 f834 	bl	8000430 <delay>
    	GPIO_ResetBits(GPIOD,GPIO_Pin_13);
 80003c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <main+0xcc>)
 80003ce:	f7ff ff98 	bl	8000302 <GPIO_ResetBits>
    	delay(N);
 80003d2:	68b8      	ldr	r0, [r7, #8]
 80003d4:	f000 f82c 	bl	8000430 <delay>

    	GPIO_SetBits(GPIOD,GPIO_Pin_14);
 80003d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <main+0xcc>)
 80003de:	f7ff ff81 	bl	80002e4 <GPIO_SetBits>
    	delay(N);
 80003e2:	68b8      	ldr	r0, [r7, #8]
 80003e4:	f000 f824 	bl	8000430 <delay>
    	GPIO_ResetBits(GPIOD,GPIO_Pin_14);
 80003e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ec:	480f      	ldr	r0, [pc, #60]	; (800042c <main+0xcc>)
 80003ee:	f7ff ff88 	bl	8000302 <GPIO_ResetBits>
    	delay(N);
 80003f2:	68b8      	ldr	r0, [r7, #8]
 80003f4:	f000 f81c 	bl	8000430 <delay>

    	GPIO_SetBits(GPIOD,GPIO_Pin_15);
 80003f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <main+0xcc>)
 80003fe:	f7ff ff71 	bl	80002e4 <GPIO_SetBits>
    	delay(N);
 8000402:	68b8      	ldr	r0, [r7, #8]
 8000404:	f000 f814 	bl	8000430 <delay>
    	GPIO_ResetBits(GPIOD,GPIO_Pin_15);
 8000408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <main+0xcc>)
 800040e:	f7ff ff78 	bl	8000302 <GPIO_ResetBits>
    	delay(N);
 8000412:	68b8      	ldr	r0, [r7, #8]
 8000414:	f000 f80c 	bl	8000430 <delay>

    	Loop++;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
    	N=aumentar(Loop,N);
 800041e:	68b9      	ldr	r1, [r7, #8]
 8000420:	68f8      	ldr	r0, [r7, #12]
 8000422:	f000 f815 	bl	8000450 <aumentar>
 8000426:	60b8      	str	r0, [r7, #8]
    	GPIO_SetBits(GPIOD,GPIO_Pin_12);
 8000428:	e7b6      	b.n	8000398 <main+0x38>
 800042a:	bf00      	nop
 800042c:	40020c00 	.word	0x40020c00

08000430 <delay>:
    }
}


void delay(uint32_t tiempo)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

	while(--tiempo);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3b01      	subs	r3, #1
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1f9      	bne.n	8000438 <delay+0x8>

}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <aumentar>:

uint32_t aumentar(int Loop,uint32_t N)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
	if(Loop<15)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2b0e      	cmp	r3, #14
 800045e:	dc03      	bgt.n	8000468 <aumentar+0x18>
	{
	    N=N-0xf000;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	f5a3 4370 	sub.w	r3, r3, #61440	; 0xf000
 8000466:	603b      	str	r3, [r7, #0]
	}

	if(Loop==15)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b0f      	cmp	r3, #15
 800046c:	d12f      	bne.n	80004ce <aumentar+0x7e>
	{
	   while(1)
	   {
	    	GPIO_SetBits(GPIOD,GPIO_Pin_12);
 800046e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000472:	4819      	ldr	r0, [pc, #100]	; (80004d8 <aumentar+0x88>)
 8000474:	f7ff ff36 	bl	80002e4 <GPIO_SetBits>
	    	GPIO_SetBits(GPIOD,GPIO_Pin_13);
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	4816      	ldr	r0, [pc, #88]	; (80004d8 <aumentar+0x88>)
 800047e:	f7ff ff31 	bl	80002e4 <GPIO_SetBits>
	    	GPIO_SetBits(GPIOD,GPIO_Pin_14);
 8000482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000486:	4814      	ldr	r0, [pc, #80]	; (80004d8 <aumentar+0x88>)
 8000488:	f7ff ff2c 	bl	80002e4 <GPIO_SetBits>
	    	GPIO_SetBits(GPIOD,GPIO_Pin_15);
 800048c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000490:	4811      	ldr	r0, [pc, #68]	; (80004d8 <aumentar+0x88>)
 8000492:	f7ff ff27 	bl	80002e4 <GPIO_SetBits>
	    	delay(0xf000000);
 8000496:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 800049a:	f7ff ffc9 	bl	8000430 <delay>
	    	GPIO_ResetBits(GPIOD,GPIO_Pin_12);
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	480d      	ldr	r0, [pc, #52]	; (80004d8 <aumentar+0x88>)
 80004a4:	f7ff ff2d 	bl	8000302 <GPIO_ResetBits>
	    	GPIO_ResetBits(GPIOD,GPIO_Pin_13);
 80004a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ac:	480a      	ldr	r0, [pc, #40]	; (80004d8 <aumentar+0x88>)
 80004ae:	f7ff ff28 	bl	8000302 <GPIO_ResetBits>
	    	GPIO_ResetBits(GPIOD,GPIO_Pin_14);
 80004b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b6:	4808      	ldr	r0, [pc, #32]	; (80004d8 <aumentar+0x88>)
 80004b8:	f7ff ff23 	bl	8000302 <GPIO_ResetBits>
	    	GPIO_ResetBits(GPIOD,GPIO_Pin_15);
 80004bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <aumentar+0x88>)
 80004c2:	f7ff ff1e 	bl	8000302 <GPIO_ResetBits>
	    	delay(0xf0);
 80004c6:	20f0      	movs	r0, #240	; 0xf0
 80004c8:	f7ff ffb2 	bl	8000430 <delay>
	    	GPIO_SetBits(GPIOD,GPIO_Pin_12);
 80004cc:	e7cf      	b.n	800046e <aumentar+0x1e>

	    }
	  }

	return N;
 80004ce:	683b      	ldr	r3, [r7, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40020c00 	.word	0x40020c00

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004e2:	e003      	b.n	80004ec <LoopCopyDataInit>

080004e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004ea:	3104      	adds	r1, #4

080004ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004f4:	d3f6      	bcc.n	80004e4 <CopyDataInit>
  ldr  r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004f8:	e002      	b.n	8000500 <LoopFillZerobss>

080004fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004fc:	f842 3b04 	str.w	r3, [r2], #4

08000500 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000502:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000504:	d3f9      	bcc.n	80004fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000506:	f000 f841 	bl	800058c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f000 f8f1 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f7ff ff27 	bl	8000360 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000514:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000518:	08000758 	.word	0x08000758
  ldr  r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000520:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000524:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000528:	2000001c 	.word	0x2000001c

0800052c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>

0800052e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000540:	e7fe      	b.n	8000540 <HardFault_Handler+0x4>

08000542 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000546:	e7fe      	b.n	8000546 <MemManage_Handler+0x4>

08000548 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800054c:	e7fe      	b.n	800054c <BusFault_Handler+0x4>

0800054e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000552:	e7fe      	b.n	8000552 <UsageFault_Handler+0x4>

08000554 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000590:	4a16      	ldr	r2, [pc, #88]	; (80005ec <SystemInit+0x60>)
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <SystemInit+0x60>)
 8000594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <SystemInit+0x64>)
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <SystemInit+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <SystemInit+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <SystemInit+0x64>)
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <SystemInit+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <SystemInit+0x64>)
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <SystemInit+0x68>)
 80005c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <SystemInit+0x64>)
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <SystemInit+0x64>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SystemInit+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80005da:	f000 f80d 	bl	80005f8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005de:	4b03      	ldr	r3, [pc, #12]	; (80005ec <SystemInit+0x60>)
 80005e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005e4:	609a      	str	r2, [r3, #8]
#endif
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	40023800 	.word	0x40023800
 80005f4:	24003010 	.word	0x24003010

080005f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000606:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <SetSysClock+0xe8>)
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <SetSysClock+0xe8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000610:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <SetSysClock+0xe8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d103      	bne.n	8000630 <SetSysClock+0x38>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800062e:	d1f0      	bne.n	8000612 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SetSysClock+0xe8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800063c:	2301      	movs	r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	e001      	b.n	8000646 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d142      	bne.n	80006d2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800064c:	4a24      	ldr	r2, [pc, #144]	; (80006e0 <SetSysClock+0xe8>)
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SetSysClock+0xe8>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000658:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SetSysClock+0xec>)
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SetSysClock+0xec>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <SetSysClock+0xe8>)
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SetSysClock+0xe8>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800066c:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <SetSysClock+0xe8>)
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <SetSysClock+0xe8>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000676:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000678:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <SetSysClock+0xe8>)
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <SetSysClock+0xe8>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000682:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <SetSysClock+0xe8>)
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <SetSysClock+0xf0>)
 8000688:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <SetSysClock+0xe8>)
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SetSysClock+0xe8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000694:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000696:	bf00      	nop
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <SetSysClock+0xe8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f9      	beq.n	8000698 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <SetSysClock+0xf4>)
 80006a6:	f240 7205 	movw	r2, #1797	; 0x705
 80006aa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <SetSysClock+0xe8>)
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <SetSysClock+0xe8>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f023 0303 	bic.w	r3, r3, #3
 80006b6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006b8:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <SetSysClock+0xe8>)
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <SetSysClock+0xe8>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80006c4:	bf00      	nop
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SetSysClock+0xe8>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f003 030c 	and.w	r3, r3, #12
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d1f9      	bne.n	80006c6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000
 80006e8:	07405419 	.word	0x07405419
 80006ec:	40023c00 	.word	0x40023c00

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4e0d      	ldr	r6, [pc, #52]	; (8000728 <__libc_init_array+0x38>)
 80006f4:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f6:	1ba4      	subs	r4, r4, r6
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	2500      	movs	r5, #0
 80006fc:	42a5      	cmp	r5, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	4e0b      	ldr	r6, [pc, #44]	; (8000730 <__libc_init_array+0x40>)
 8000702:	4c0c      	ldr	r4, [pc, #48]	; (8000734 <__libc_init_array+0x44>)
 8000704:	f000 f818 	bl	8000738 <_init>
 8000708:	1ba4      	subs	r4, r4, r6
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	2500      	movs	r5, #0
 800070e:	42a5      	cmp	r5, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000718:	4798      	blx	r3
 800071a:	3501      	adds	r5, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000722:	4798      	blx	r3
 8000724:	3501      	adds	r5, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000750 	.word	0x08000750
 800072c:	08000750 	.word	0x08000750
 8000730:	08000750 	.word	0x08000750
 8000734:	08000754 	.word	0x08000754

08000738 <_init>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr

08000744 <_fini>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr
